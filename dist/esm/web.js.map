{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAG5C,MAAM,OAAO,mBAAoB,SAAQ,SAAS;IAEhD,KAAK,CAAC,IAAI,CAAC,OAA0B;QACnC,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;QACrC,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,KAAK,CAAC,aAAa;QACjB,sEAAsE;QACtE,IAAI,QAAQ,IAAI,WAAW,EAAE;YAC3B,MAAM,MAAM,GAAI,WAAmB,CAAC,MAAM,CAAC;YAE3C,OAAO;gBACL,QAAQ,EAAE,MAAM,CAAC,eAAe,IAAI,CAAC;gBACrC,YAAY,EAAE,MAAM,CAAC,eAAe,GAAG,MAAM,CAAC,cAAc,IAAI,CAAC;gBACjE,OAAO,EAAE,MAAM,CAAC,cAAc,IAAI,CAAC;gBACnC,SAAS,EAAE,MAAM,CAAC,eAAe,GAAG,GAAG,IAAI,CAAC;gBAC5C,WAAW,EAAE,MAAM,CAAC,cAAc,GAAG,MAAM,CAAC,eAAe,GAAG,GAAG;gBACjE,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,eAAe,IAAI,CAAC,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC;gBACnE,cAAc,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,eAAe,GAAG,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC;gBACjG,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,cAAc,IAAI,CAAC,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC;gBACjE,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,eAAe,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC;gBAC5E,cAAc,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,cAAc,GAAG,MAAM,CAAC,eAAe,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC;gBACvF,MAAM,EAAE,CAAC,MAAM,CAAC,cAAc,GAAG,MAAM,CAAC,eAAe,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI;aAC9E,CAAC;SACH;QAED,sDAAsD;QACtD,MAAM,IAAI,CAAC,aAAa,CAAC,wCAAwC,CAAC,CAAC;IACrE,CAAC;CACF","sourcesContent":["import { WebPlugin } from '@capacitor/core';\nimport type { CapacitorRAMInfoPlugin, MemoryInfo } from './definitions';\n\nexport class CapacitorRAMInfoWeb extends WebPlugin implements CapacitorRAMInfoPlugin {\n  \n  async echo(options: { value: string }): Promise<{ value: string }> {\n    console.log('ECHO on web:', options);\n    return options;\n  }\n\n  async getMemoryInfo(): Promise<MemoryInfo> {\n    // Sur le web, on peut utiliser performance.memory s'il est disponible\n    if ('memory' in performance) {\n      const memory = (performance as any).memory;\n      \n      return {\n        totalRam: memory.jsHeapSizeLimit || 0,\n        availableRam: memory.jsHeapSizeLimit - memory.usedJSHeapSize || 0,\n        usedRam: memory.usedJSHeapSize || 0,\n        threshold: memory.jsHeapSizeLimit * 0.8 || 0, // 80% comme seuil\n        isLowMemory: memory.usedJSHeapSize / memory.jsHeapSizeLimit > 0.8,\n        totalRamMB: Math.round((memory.jsHeapSizeLimit || 0) / 1024 / 1024),\n        availableRamMB: Math.round(((memory.jsHeapSizeLimit - memory.usedJSHeapSize) || 0) / 1024 / 1024),\n        usedRamMB: Math.round((memory.usedJSHeapSize || 0) / 1024 / 1024),\n        thresholdMB: Math.round(((memory.jsHeapSizeLimit * 0.8) || 0) / 1024 / 1024),\n        usedPercentage: Math.round((memory.usedJSHeapSize / memory.jsHeapSizeLimit) * 100) || 0,\n        status: (memory.usedJSHeapSize / memory.jsHeapSizeLimit > 0.8) ? \"LOW\" : \"OK\"\n      };\n    }\n    \n    // Fallback si performance.memory n'est pas disponible\n    throw this.unimplemented('RAM info not available on web platform');\n  }\n}"]}